/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package basicLibrary;


public class Library {


    public static int[] roll(int numRoll) {

        int[] tryArray = new int[numRoll];

        for (int i = 0; i < tryArray.length; i++) {
            tryArray[i] = (int) (5 * Math.random()) + 1;
        }
        return tryArray;
    }

    public static boolean containsDuplicates(int[] inputArray) {
        boolean status = false;
        for (int i = 0; i < inputArray.length; i++) {
            for (int j = i + 1; j < inputArray.length; j++) {
                if (inputArray[i] == inputArray[j]) {
                    status = true;
                    break;
                }
            }
        }
        return status;
    }

    public static double average(int[] inputArray) {
        int sum = 0;
        for (int j : inputArray) {
            sum = sum + j;
        }
        return (double) sum / inputArray.length;

    }
    public static int[] lowestAvg(int[][] arr){
        double sum = 0 ;
        double average = 0;

        double firstSum = 0;
        double firstAvg = 0;

        int index1 = 0 ;

        int[] lowestAvgArr;
        for(int i = 0 ; i < arr[0].length ; i++){
            firstSum = firstSum + arr[0][i];
            firstAvg = firstSum/arr[0].length;
        }

        double lowestAverage = firstAvg ;
        for(int i = 0 ; i < arr.length ; i++){
            for(int j = 0 ; j < arr[i].length ; j++){
                sum = sum + arr[i][j];
                average = sum/arr[i].length;
            }
            if(average<lowestAverage){
                lowestAverage=average;
                index1=i;
            }
            sum=0;
            average=0;
        }
        lowestAvgArr=arr[index1];
        return lowestAvgArr;
    }


            public static int binarySearch(int[] binaryArray , int checker){

        int n =binaryArray.length;
        int l =0;
        int r =n-1;
        int m=0;
        while(1<n-1){

            m=(l+r)/2;
            if(binaryArray[m]<checker) {
                l = m + 1;
            }else if(binaryArray[m]>checker){
                r=m-1;
            }
            else
                return m;

        }

                return -1;
            }

}