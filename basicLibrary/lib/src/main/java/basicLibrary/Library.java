/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package basicLibrary;


import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

public class Library {
    public static void main(String[] args) {

    }
    public static int[] roll(int numRoll) {

        int[] tryArray = new int[numRoll];

        for (int i = 0; i < tryArray.length; i++) {
            tryArray[i] = (int) (5 * Math.random()) + 1;
        }
        return tryArray;
    }

    public static boolean containsDuplicates(int[] inputArray) {
        boolean status = false;
        for (int i = 0; i < inputArray.length; i++) {
            for (int j = i + 1; j < inputArray.length; j++) {
                if (inputArray[i] == inputArray[j]) {
                    status = true;
                    break;
                }
            }
        }
        return status;
    }

    public static double average(int[] inputArray) {
        int sum = 0;
        for (int j : inputArray) {
            sum = sum + j;
        }
        return (double) sum / inputArray.length;

    }
    public static int[] lowestAvg(int[][] arr){
        double sum = 0 ;
        double average = 0;

        double firstSum = 0;
        double firstAvg = 0;

        int index1 = 0 ;

        int[] lowestAvgArr;
        for(int i = 0 ; i < arr[0].length ; i++){
            firstSum = firstSum + arr[0][i];
            firstAvg = firstSum/arr[0].length;
        }

        double lowestAverage = firstAvg ;
        for(int i = 0 ; i < arr.length ; i++){
            for(int j = 0 ; j < arr[i].length ; j++){
                sum = sum + arr[i][j];
                average = sum/arr[i].length;
            }
            if(average<lowestAverage){
                lowestAverage=average;
                index1=i;
            }
            sum=0;
            average=0;
        }
        lowestAvgArr=arr[index1];
        return lowestAvgArr;
    }

    public String maxAndMin(int[][] arr) {
        int maxValue = arr[0][0];
        int minValue = arr[0][0];
        for (int i = 0; i < arr.length; i++) {

            for (int j = 0; j < arr[i].length; j++) {
                if (arr[i][j] <= minValue) {
                    minValue = arr[i][j];

                }

                if (arr[i][j] >= maxValue) {
                    maxValue = arr[i][j];
                }
            }
        }


        Set<Integer> uniqueValues = new HashSet<>();
        String returnedString = "High: " + maxValue + "\n" + "Low : " + minValue;

        for (int i = 0; i < arr.length; i++) {

            for (int j = 0; j < arr[i].length; j++) {

                uniqueValues.add(arr[i][j]);

            }
        }

        for(int i = minValue; i < maxValue; i++)

            if(uniqueValues.contains(i)){

            }
            else{
                returnedString = returnedString.concat("\n"+"Never saw temperature: " + i);
            }



        return returnedString;
    }


    public static String tally(List<String> votes) {
        HashSet<String> votedItems = new HashSet<>();
        votedItems.addAll(votes);
        int numVotes = 0;
        String winner= null;
        for (String item : votedItems) {
            int count = Collections.frequency(votes, item);
            if (numVotes < count) {
                numVotes = count;
                winner = item;
            }
        }
        return winner;
    }

}